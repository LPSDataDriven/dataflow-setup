"""
DAG de Produ√ß√£o para Pipeline DBT no AWS MWAA
Este DAG demonstra como executar DBT Core em produ√ß√£o no MWAA
"""

import os
import pendulum
from airflow import DAG
from airflow.decorators import task
from airflow.models import Variable
from airflow.exceptions import AirflowException
from airflow.providers.amazon.aws.operators.s3 import S3ListOperator
from airflow.providers.amazon.aws.secrets.secrets_manager import SecretsManagerBackend

# Configura√ß√µes do MWAA
DEFAULT_PROJECT_DIR = Variable.get("dbt_project_dir", default_var="/opt/airflow/dbt_project")
DEFAULT_PROFILES_DIR = Variable.get("dbt_profiles_dir", default_var="/opt/airflow/.dbt")

with DAG(
    dag_id="dbt_production_pipeline",
    schedule="0 6 * * *",  # Executa diariamente √†s 6h UTC
    start_date=pendulum.datetime(2024, 1, 1, tz="UTC"),
    catchup=False,
    dag_display_name="DBT Production Pipeline",
    tags=["dbt", "production", "mwaa"],
    description="Pipeline de produ√ß√£o DBT para AWS MWAA",
    max_active_runs=1,  # Apenas uma execu√ß√£o por vez
    default_args={
        "retries": 2,
        "retry_delay": pendulum.duration(minutes=5),
        "email_on_failure": True,
        "email_on_retry": False,
    },
) as dag:

    dag.doc_md = """
    ## Pipeline de Produ√ß√£o DBT

    Este DAG executa o pipeline completo do DBT em produ√ß√£o:

    ### Fluxo:
    1. **Prepara√ß√£o**: Valida configura√ß√µes e conectividade
    2. **Extra√ß√£o**: Executa dbt deps (depend√™ncias)
    3. **Transforma√ß√£o**: Executa dbt build (models + tests)
    4. **Valida√ß√£o**: Executa dbt test (testes adicionais)
    5. **Documenta√ß√£o**: Gera documenta√ß√£o (opcional)
    6. **Limpeza**: Remove arquivos tempor√°rios

    ### Configura√ß√µes:
    - **Schedule**: Di√°rio √†s 6h UTC
    - **Retry**: 2 tentativas com 5min de intervalo
    - **Max Active Runs**: 1 (evita sobreposi√ß√£o)
    """

    @task
    def validate_environment(**context):
        """
        Valida o ambiente e configura√ß√µes antes da execu√ß√£o
        """
        project_dir = Variable.get("dbt_project_dir", default_var=DEFAULT_PROJECT_DIR)
        profiles_dir = Variable.get("dbt_profiles_dir", default_var=DEFAULT_PROFILES_DIR)
        dbt_target = Variable.get("dbt_target", default_var="prod")

        print(f"üîç Validando ambiente de produ√ß√£o:")
        print(f"  Project dir: {project_dir}")
        print(f"  Profiles dir: {profiles_dir}")
        print(f"  Target: {dbt_target}")

        # Verificar se os diret√≥rios existem
        if not os.path.exists(project_dir):
            raise AirflowException(f"‚ùå Diret√≥rio do projeto n√£o encontrado: {project_dir}")

        if not os.path.exists(profiles_dir):
            raise AirflowException(f"‚ùå Diret√≥rio de profiles n√£o encontrado: {profiles_dir}")

        # Verificar se dbt_project.yml existe
        dbt_project_yml = os.path.join(project_dir, "dbt_project.yml")
        if not os.path.exists(dbt_project_yml):
            raise AirflowException(f"‚ùå Arquivo dbt_project.yml n√£o encontrado: {dbt_project_yml}")

        # Verificar se profiles.yml existe
        profiles_yml = os.path.join(profiles_dir, "profiles.yml")
        if not os.path.exists(profiles_yml):
            raise AirflowException(f"‚ùå Arquivo profiles.yml n√£o encontrado: {profiles_yml}")

        print("‚úÖ Ambiente validado com sucesso!")
        return {"status": "validated", "timestamp": context["ts"]}

    @task
    def install_dbt_dependencies(**context):
        """
        Instala depend√™ncias do DBT (packages)
        """
        project_dir = Variable.get("dbt_project_dir", default_var=DEFAULT_PROJECT_DIR)
        profiles_dir = Variable.get("dbt_profiles_dir", default_var=DEFAULT_PROFILES_DIR)

        print("üì¶ Instalando depend√™ncias do DBT...")

        import subprocess

        try:
            # Mudar para o diret√≥rio do projeto
            original_cwd = os.getcwd()
            os.chdir(project_dir)

            # Executar dbt deps
            result = subprocess.run(
                ["dbt", "deps", "--profiles-dir", profiles_dir],
                capture_output=True,
                text=True,
                env={
                    **os.environ,
                    "DBT_PROFILES_DIR": profiles_dir,
                }
            )

            print("STDOUT:", result.stdout)
            if result.stderr:
                print("STDERR:", result.stderr)

            if result.returncode != 0:
                raise AirflowException(f"‚ùå dbt deps falhou com c√≥digo {result.returncode}")

            print("‚úÖ Depend√™ncias instaladas com sucesso!")
            return {"status": "deps_installed", "output": result.stdout}

        except Exception as e:
            print(f"‚ùå Erro ao instalar depend√™ncias: {str(e)}")
            raise AirflowException(f"Erro ao instalar depend√™ncias: {str(e)}")

        finally:
            os.chdir(original_cwd)

    @task
    def run_dbt_build(**context):
        """
        Executa dbt build (models + tests)
        """
        project_dir = Variable.get("dbt_project_dir", default_var=DEFAULT_PROJECT_DIR)
        profiles_dir = Variable.get("dbt_profiles_dir", default_var=DEFAULT_PROFILES_DIR)
        dbt_target = Variable.get("dbt_target", default_var="prod")

        print("üèóÔ∏è Executando dbt build...")

        import subprocess

        try:
            # Mudar para o diret√≥rio do projeto
            original_cwd = os.getcwd()
            os.chdir(project_dir)

            # Executar dbt build
            cmd = [
                "dbt", "build",
                "--project-dir", project_dir,
                "--profiles-dir", profiles_dir,
                "--target", dbt_target,
                "--log-level", "info"
            ]

            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                env={
                    **os.environ,
                    "DBT_PROFILES_DIR": profiles_dir,
                    "DBT_TARGET": dbt_target,
                }
            )

            print("STDOUT:", result.stdout)
            if result.stderr:
                print("STDERR:", result.stderr)

            if result.returncode != 0:
                raise AirflowException(f"‚ùå dbt build falhou com c√≥digo {result.returncode}")

            print("‚úÖ dbt build executado com sucesso!")
            return {
                "status": "build_completed",
                "output": result.stdout,
                "returncode": result.returncode
            }

        except Exception as e:
            print(f"‚ùå Erro ao executar dbt build: {str(e)}")
            raise AirflowException(f"Erro ao executar dbt build: {str(e)}")

        finally:
            os.chdir(original_cwd)

    @task
    def run_dbt_tests(**context):
        """
        Executa testes adicionais do DBT
        """
        project_dir = Variable.get("dbt_project_dir", default_var=DEFAULT_PROJECT_DIR)
        profiles_dir = Variable.get("dbt_profiles_dir", default_var=DEFAULT_PROFILES_DIR)
        dbt_target = Variable.get("dbt_target", default_var="prod")

        print("üß™ Executando testes adicionais do DBT...")

        import subprocess

        try:
            # Mudar para o diret√≥rio do projeto
            original_cwd = os.getcwd()
            os.chdir(project_dir)

            # Executar dbt test
            result = subprocess.run(
                ["dbt", "test", "--profiles-dir", profiles_dir, "--target", dbt_target],
                capture_output=True,
                text=True,
                env={
                    **os.environ,
                    "DBT_PROFILES_DIR": profiles_dir,
                    "DBT_TARGET": dbt_target,
                }
            )

            print("STDOUT:", result.stdout)
            if result.stderr:
                print("STDERR:", result.stderr)

            if result.returncode != 0:
                raise AirflowException(f"‚ùå dbt test falhou com c√≥digo {result.returncode}")

            print("‚úÖ Testes executados com sucesso!")
            return {
                "status": "tests_passed",
                "output": result.stdout,
                "returncode": result.returncode
            }

        except Exception as e:
            print(f"‚ùå Erro ao executar testes: {str(e)}")
            raise AirflowException(f"Erro ao executar testes: {str(e)}")

        finally:
            os.chdir(original_cwd)

    @task
    def generate_dbt_docs(**context):
        """
        Gera documenta√ß√£o do DBT (opcional)
        """
        project_dir = Variable.get("dbt_project_dir", default_var=DEFAULT_PROJECT_DIR)
        profiles_dir = Variable.get("dbt_profiles_dir", default_var=DEFAULT_PROFILES_DIR)
        dbt_target = Variable.get("dbt_target", default_var="prod")

        print("üìö Gerando documenta√ß√£o do DBT...")

        import subprocess

        try:
            # Mudar para o diret√≥rio do projeto
            original_cwd = os.getcwd()
            os.chdir(project_dir)

            # Executar dbt docs generate
            result = subprocess.run(
                ["dbt", "docs", "generate", "--profiles-dir", profiles_dir, "--target", dbt_target],
                capture_output=True,
                text=True,
                env={
                    **os.environ,
                    "DBT_PROFILES_DIR": profiles_dir,
                    "DBT_TARGET": dbt_target,
                }
            )

            print("STDOUT:", result.stdout)
            if result.stderr:
                print("STDERR:", result.stderr)

            if result.returncode != 0:
                print(f"‚ö†Ô∏è Aviso: dbt docs generate falhou com c√≥digo {result.returncode}")
                return {"status": "docs_failed", "output": result.stderr}

            print("‚úÖ Documenta√ß√£o gerada com sucesso!")
            return {
                "status": "docs_generated",
                "output": result.stdout,
                "returncode": result.returncode
            }

        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: Erro ao gerar documenta√ß√£o: {str(e)}")
            return {"status": "docs_error", "error": str(e)}

        finally:
            os.chdir(original_cwd)

    @task
    def cleanup_temp_files(**context):
        """
        Remove arquivos tempor√°rios
        """
        project_dir = Variable.get("dbt_project_dir", default_var=DEFAULT_PROJECT_DIR)

        print("üßπ Limpando arquivos tempor√°rios...")

        try:
            # Remover arquivos tempor√°rios do DBT
            temp_files = [
                "target/",
                "logs/",
                "dbt_packages/",
            ]

            for temp_file in temp_files:
                temp_path = os.path.join(project_dir, temp_file)
                if os.path.exists(temp_path):
                    import shutil
                    shutil.rmtree(temp_path)
                    print(f"  ‚úÖ Removido: {temp_path}")

            print("‚úÖ Limpeza conclu√≠da!")
            return {"status": "cleaned", "timestamp": context["ts"]}

        except Exception as e:
            print(f"‚ö†Ô∏è Aviso: Erro na limpeza: {str(e)}")
            return {"status": "cleanup_error", "error": str(e)}

    # Definir depend√™ncias entre as tasks
    validation_task = validate_environment()
    deps_task = install_dbt_dependencies()
    build_task = run_dbt_build()
    tests_task = run_dbt_tests()
    docs_task = generate_dbt_docs()
    cleanup_task = cleanup_temp_files()

    # Fluxo de execu√ß√£o
    validation_task >> deps_task >> build_task >> tests_task >> docs_task >> cleanup_task

if __name__ == "__main__":
    from airflow.models import DagBag

    dag = DagBag().get_dag(dag_id="dbt_production_pipeline")
    dag.test()

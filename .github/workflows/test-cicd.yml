name: Test CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:  # Permite execu√ß√£o manual

env:
  AWS_REGION: us-east-1
  S3_BUCKET: lpsdata-airflow-1

jobs:
  # Job 1: Valida√ß√£o b√°sica
  basic-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate project structure
      run: |
        echo "üîç Verificando estrutura do projeto..."

        # Verificar se os diret√≥rios principais existem
        if [ -d "dbt" ]; then
          echo "‚úÖ Diret√≥rio dbt encontrado"
        else
          echo "‚ùå Diret√≥rio dbt n√£o encontrado"
          exit 1
        fi

        if [ -d "airflow-local" ]; then
          echo "‚úÖ Diret√≥rio airflow-local encontrado"
        else
          echo "‚ùå Diret√≥rio airflow-local n√£o encontrado"
          exit 1
        fi

        if [ -f ".dbt/profiles.yml" ]; then
          echo "‚úÖ Arquivo profiles.yml encontrado"
        else
          echo "‚ùå Arquivo profiles.yml n√£o encontrado"
          exit 1
        fi

        echo "üéâ Estrutura do projeto validada!"

    - name: Test Python syntax
      run: |
        echo "üîç Testando sintaxe Python..."

        # Verificar se h√° arquivos Python para testar
        if find . -name "*.py" -not -path "./.venv/*" -not -path "./.git/*" | head -1 | grep -q .; then
          echo "üìÅ Arquivos Python encontrados, testando sintaxe..."
          find . -name "*.py" -not -path "./.venv/*" -not -path "./.git/*" -exec python -m py_compile {} \;
          echo "‚úÖ Sintaxe Python validada!"
        else
          echo "‚ÑπÔ∏è Nenhum arquivo Python encontrado para testar"
        fi

    - name: Test DBT project structure
      run: |
        echo "üîç Verificando estrutura do projeto DBT..."

        if [ -f "dbt/dbt_project.yml" ]; then
          echo "‚úÖ dbt_project.yml encontrado"
        else
          echo "‚ùå dbt_project.yml n√£o encontrado"
          exit 1
        fi

        if [ -d "dbt/models" ]; then
          echo "‚úÖ Diret√≥rio models encontrado"
        else
          echo "‚ÑπÔ∏è Diret√≥rio models n√£o encontrado (criando estrutura b√°sica...)"
          mkdir -p dbt/models
          echo "‚úÖ Diret√≥rio models criado"
        fi

        echo "üéâ Estrutura DBT validada!"

  # Job 2: Teste de conectividade (apenas se secrets estiverem configurados)
  connectivity-test:
    runs-on: ubuntu-latest
    if: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test AWS connectivity
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
      run: |
        echo "üîç Testando conectividade AWS..."

        # Usar AWS CLI que j√° vem instalado no runner
        aws sts get-caller-identity

        echo "‚úÖ Conectividade AWS funcionando!"

        # Testar acesso ao S3 (sem criar bucket se n√£o existir)
        if aws s3 ls "s3://${{ env.S3_BUCKET }}" 2>/dev/null; then
          echo "‚úÖ Bucket S3 acess√≠vel: ${{ env.S3_BUCKET }}"
        else
          echo "‚ÑπÔ∏è Bucket S3 n√£o encontrado: ${{ env.S3_BUCKET }}"
          echo "üí° Isso √© normal se o bucket ainda n√£o foi criado"
        fi

  # Job 3: Teste de DBT (apenas se secrets do Snowflake estiverem configurados)
  dbt-test:
    runs-on: ubuntu-latest
    if: ${{ secrets.SNOWFLAKE_ACCOUNT != '' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install DBT
      run: |
        pip install --upgrade pip
        pip install dbt-core dbt-snowflake

    - name: Test DBT connection
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
        SNOWFLAKE_DATABASE_DEV: ${{ secrets.SNOWFLAKE_DATABASE_DEV }}
        SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      run: |
        echo "üîç Testando conex√£o DBT com Snowflake..."

        # Validar sintaxe do projeto
        cd dbt
        dbt parse --profiles-dir ../.dbt

        # Testar conex√£o (sem executar)
        dbt debug --profiles-dir ../.dbt

        echo "‚úÖ Conex√£o DBT funcionando!"

  # Job 4: Notifica√ß√£o de sucesso
  success-notification:
    needs: [basic-validation]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Success notification
      run: |
        echo "üéâ Pipeline de valida√ß√£o b√°sica conclu√≠do!"
        echo ""
        echo "üìã Status dos jobs:"
        echo "‚úÖ Valida√ß√£o b√°sica: ${{ needs.basic-validation.result }}"
        echo "üîó Teste de conectividade: ${{ needs.connectivity-test.result || 'Pulado (secrets n√£o configurados)' }}"
        echo "üîó Teste DBT: ${{ needs.dbt-test.result || 'Pulado (secrets n√£o configurados)' }}"
        echo ""
        echo "üí° Para habilitar todos os testes, configure os secrets no GitHub:"
        echo "   - AWS_ACCESS_KEY_ID"
        echo "   - AWS_SECRET_ACCESS_KEY"
        echo "   - SNOWFLAKE_ACCOUNT"
        echo "   - SNOWFLAKE_USER"
        echo "   - SNOWFLAKE_PASSWORD"
        echo "   - SNOWFLAKE_WAREHOUSE"
        echo "   - SNOWFLAKE_DATABASE_DEV"
        echo "   - SNOWFLAKE_SCHEMA"
        echo "   - SNOWFLAKE_ROLE"

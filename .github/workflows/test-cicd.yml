name: Test CI/CD Pipeline

on:
  push:
  pull_request:
  workflow_dispatch:  # Permite execu√ß√£o manual

env:
  AWS_REGION: us-east-1
  S3_BUCKET: lpsdata-airflow-1

jobs:
  # Job 1: Valida√ß√£o b√°sica
  basic-validation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate project structure
      run: |
        echo "üîç Verificando estrutura do projeto..."

        # Verificar se os diret√≥rios principais existem
        if [ -d "dbt" ]; then
          echo "‚úÖ Diret√≥rio dbt encontrado"
        else
          echo "‚ùå Diret√≥rio dbt n√£o encontrado"
          exit 1
        fi

        if [ -d "airflow-local" ]; then
          echo "‚úÖ Diret√≥rio airflow-local encontrado"
        else
          echo "‚ùå Diret√≥rio airflow-local n√£o encontrado"
          exit 1
        fi

        if [ -f ".dbt/profiles.yml" ]; then
          echo "‚úÖ Arquivo profiles.yml encontrado"
        else
          echo "‚ùå Arquivo profiles.yml n√£o encontrado"
          exit 1
        fi

        echo "üéâ Estrutura do projeto validada!"

    - name: Test Python syntax
      run: |
        echo "üîç Testando sintaxe Python..."

        # Verificar se h√° arquivos Python para testar
        if find . -name "*.py" -not -path "./.venv/*" -not -path "./.git/*" | head -1 | grep -q .; then
          echo "üìÅ Arquivos Python encontrados, testando sintaxe..."
          find . -name "*.py" -not -path "./.venv/*" -not -path "./.git/*" -exec python -m py_compile {} \;
          echo "‚úÖ Sintaxe Python validada!"
        else
          echo "‚ÑπÔ∏è Nenhum arquivo Python encontrado para testar"
        fi

    - name: Test DBT project structure
      run: |
        echo "üîç Verificando estrutura do projeto DBT..."

        if [ -f "dbt/dbt_project.yml" ]; then
          echo "‚úÖ dbt_project.yml encontrado"
        else
          echo "‚ùå dbt_project.yml n√£o encontrado"
          exit 1
        fi

        if [ -d "dbt/models" ]; then
          echo "‚úÖ Diret√≥rio models encontrado"
        else
          echo "‚ÑπÔ∏è Diret√≥rio models n√£o encontrado (criando estrutura b√°sica...)"
          mkdir -p dbt/models
          echo "‚úÖ Diret√≥rio models criado"
        fi

        echo "üéâ Estrutura DBT validada!"

  # Job 2: Linter com pre-commit
  pre-commit-lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pre-commit
      run: |
        pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit
      run: |
        echo "üîç Executando linters com pre-commit..."

        # Instalar os hooks
        pre-commit install

        # Executar em todos os arquivos
        pre-commit run --all-files

        echo "‚úÖ Linters executados com sucesso!"

  # Job 3: Notifica√ß√£o de sucesso
  success-notification:
    needs: [basic-validation, pre-commit-lint]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Success notification
      run: |
        echo "üéâ Pipeline de valida√ß√£o conclu√≠do!"
        echo ""
        echo "üìã Status dos jobs:"
        echo "‚úÖ Valida√ß√£o b√°sica: ${{ needs.basic-validation.result }}"
        echo "‚úÖ Linter pre-commit: ${{ needs.pre-commit-lint.result }}"
        echo ""
        if [ "${{ needs.basic-validation.result }}" = "success" ] && [ "${{ needs.pre-commit-lint.result }}" = "success" ]; then
          echo "üöÄ Todos os testes passaram! C√≥digo pronto para merge."
        else
          echo "‚ö†Ô∏è Alguns testes falharam. Verifique os logs acima."
        fi
